Program       -> DeclarationList

DeclarationList -> Declaration
               | Declaration DeclarationList

Declaration    -> VariableDeclaration
               | FunctionDeclaration
               | StructDeclaration

	#dodaj DEF ispred deklaracije funkcije i sve je OK bato

CompoundDeclration -> TypeSpecifier Identifier (parameterList) { compoundStatement } 
                   |  TypeSpecifier Identifier ;
                   |  TypeSpecifier Identifier [ ConstantExpression ];


VariableDeclaration -> TypeSpecifier Identifier ;
                   | TypeSpecifier Identifier [ ConstantExpression ] ;

TypeSpecifier -> int
              | uint
              | void
              | struct Identifier

FunctionDeclaration -> TypeSpecifier Identifier ( ParameterList ) CompoundStatement

ParameterList -> Parameter
              | Parameter , ParameterList

Parameter     -> TypeSpecifier Identifier
              | TypeSpecifier Identifier [ ]

StructDeclaration -> struct Identifier { MemberList } ;

MemberList    -> Member
              | Member MemberList

Member        -> TypeSpecifier Identifier ;
              | TypeSpecifier Identifier [ ConstantExpression ] ;

CompoundStatement -> { StatementList }

StatementList -> Statement
              | Statement StatementList

Statement     -> ExpressionStatement
              | IfStatement
              | WhileStatement
              | ForStatement
              | ReturnStatement
              | VariableDeclaration


ExpressionStatement -> Expression ;

IfStatement   -> if ( ConditionalExpression ) CompoundStatement
              | if ( ConditionalExpression ) CompoundStatement else CompoundStatement

WhileStatement -> while ( ConditionalExpression ) CompoundStatement

ForStatement   -> for ( ForInitializer ; ConditionalExpression ; ForUpdater ) CompoundStatement

ForInitializer -> Expression
              | VariableDeclaration

ForUpdater    -> Expression


ReturnStatement -> return ; 
		| return Expression ;


Expression  -> ConditionalExpression
              | Identifier = Expression


ConditionalExpression -> LogicalOrExpression


LogicalOrExpression -> LogicalAndExpression
                   | LogicalAndExpression || LogicalOrExpression

LogicalAndExpression -> EqualityExpression
                    | EqualityExpression && LogicalAndExpression

EqualityExpression -> RelationalExpression
                  | RelationalExpression == EqualityExpression
                  | RelationalExpression != EqualityExpression

RelationalExpression -> AdditiveExpression
                    | AdditiveExpression < RelationalExpression
                    | AdditiveExpression > RelationalExpression
                    | AdditiveExpression <= RelationalExpression
                    | AdditiveExpression >= RelationalExpression

AdditiveExpression -> MultiplicativeExpression
                  | MultiplicativeExpression + AdditiveExpression
                  | MultiplicativeExpression - AdditiveExpression

MultiplicativeExpression -> UnaryExpression
                      | UnaryExpression * MultiplicativeExpression
                      | UnaryExpression / MultiplicativeExpression
                      | UnaryExpression % MultiplicativeExpression

UnaryExpression -> PostfixExpression
               | - UnaryExpression
               | ! UnaryExpression

PostfixExpression -> numericLiteral
                 | Identifier [ Expression ]
                 | Identifier ( ArgumentExpressionList )
                 | Identifier . Identifier
                 | Identifier -> Identifier
                 | Identifier ++
                 | Identifier --
		 | Identifier





